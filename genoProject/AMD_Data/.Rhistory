#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(chrom1)[4:length(chrom1)] = SNP_Names
#What does it look like now?:
chrom1[1:5,1:10]
#nice.
rm(SNPs,combinedSnps,chrom1_raw,i, place) #Some quick housecleaning.
chrom1[1,1:10]
chrom1[1:10,"sex"]
chrom1[10:20,"phenotype"]
#Lots of 1s and 2s again here. Turns out 2 is case(has macular degeneration), 1 is control(doesnt).
#This is rather un-intuitive.
chrom1$phenotype = chrom1$phenotype == 2 #2/case is TRUE
chrom1[10:20,"phenotype"]
#[1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
# Sweet looks good to me.
summary(chrom1$rs2455122)
# 00  CC  GC  GG
#  1 115  28   2
#Well that wont do. Let's use our fast replace function to fix all of these points.
chrom1 = fastReplace(chrom1, "00", NA )
#So fast, let's check and see if it worked:
summary(chrom1$rs2455122)
#  CC   GC   GG NA's
write.csv(chrom1, file = "chrom1.csv")
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
#genome_raw  = data.frame(read.table("amd.out_.ped"))      #The whole genome
genome_raw  = data.frame(read.table("amd_chr1.out.ped")) #Just chromosome 1
#Let's break up the object into the conditions and the SNPs
SNPs = genome_raw[,7:length(genome_raw)]
fastReplace = function(dataFrame, find, replaceWith){
temp_matrix = as.matrix(dataFrame)
temp_matrix[temp_matrix == find] = replaceWith
return(as.data.frame(temp_matrix))
}
SNPs = fastReplace(SNPs, TRUE, "T" )
#make a holder for merged snps
combinedSnps = matrix(0,146,length(SNPs)/2)
#                       146 individuals were sequenced
# To the loops! This method is commented out because later we see that the genotypes need to be sorted alphabetically to avoid
# confusion with the difference between CG and GC and so on. Order does not matter for genotypes.
# place = 1
# alleles = NULL
# for (i in seq(1,length(SNPs),2)){
#   combinedSnps[,place] = paste(SNPs[,i],SNPs[,i+1],sep = "")
#   place = place + 1
# }
#This method accomplishes this feat, and in remarkably quick time. Might be ugly but saves a lot of headaches down the road.
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste( pmin(as.character(SNPs[,i]),as.character(SNPs[,i+1])),
pmax(as.character(SNPs[,i]),as.character(SNPs[,i+1])), sep = "" )
place = place + 1
}
#Assemble the data into a big and clean(er) dataframe
genome = cbind(  genome_raw[,0:6]   ,   data.frame(combinedSnps))
#               non-genotype cols            cleaned cols
#---------------------------------------------------------------------------------------------------------
# Variable labeling:
# So the data is getting to look pretty nice. However we can quickly notice something, the column titles
# are basically giberish. Luckly the format that this data came to us from is rather standard and we can
# fix this.
#---------------------------------------------------------------------------------------------------------
#quickly let's check what we have so far:
genome[1:5,1:20]
#... V5 V6 X1 X2 ... ew, Let's fix this.
#These are standard for .ped files.
names(genome)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
genome = genome[,!(names(genome) %in% c("family_ID", "mother_ID", "father_ID"))]
#The columns of .map files are chromosome, marker ID, genetic location and physical location. We are only interested in marker ID.
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
#SNP_Names = as.character(read.table("amd.out_.map")[,2])      #Whole genome
SNP_Names = as.character(read.table("amd_chr1.out.map")[,2]) #First chromosome
#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(genome)[4:length(genome)] = SNP_Names
#What does it look like now?:
genome[1:5,1:10]
#nice.
rm(SNPs,combinedSnps,genome_raw,i, place) #Some quick housecleaning.
#focusing on one individual.
genome[1,1:10]
#    individual_ID sex phenotype rs950122 rs1496555 rs1338382 rs10492936 rs10489589 rs10489588 rs1109251
# 1      55113000    1         2       CG        GG        TT         GG         CC         AA        AA
#ID is self explanatory, what are sex and phenotype though?
genome[1:10,"sex"]
#So we have variables 1 and 2 here. Looking at the paper we see that 1 = male, 2 = female. Good to know.
genome[10:20,"phenotype"]
#Lots of 1s and 2s again here. Turns out 2 is case(has macular degeneration), 1 is control(doesnt).
#This is rather un-intuitive.
genome$phenotype = genome$phenotype == 2 #2/case is TRUE
genome[10:20,"phenotype"]
#[1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
# Sweet looks good to me.
#---------------------------------------------------------------------------------------------------------
# Missing data!:
# Different sequencing technologies, or processing software report missing data in different ways. This is
# annoying, but what is data science without some more cleaning?
# R uses NA for missing data, let's make sure this data works like that.
#---------------------------------------------------------------------------------------------------------
#By scanning through a couple of SNPs and running summarys we find that our data has 00 for it's missing values:
summary(genome$rs2455122)
genome = fastReplace(genome, "00", NA )
#So fast, let's check and see if it worked:
summary(genome$rs2455122)
#  CC   GC   GG NA's
# 115   28    2    1
#Nice.
#Let's output our cleaned data for analysis!
write.csv(genome, file = "genome_chr1.csv")
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
#genome_raw  = data.frame(read.table("amd.out_.ped"))      #The whole genome
genome_raw  = data.frame(read.table("amd_chr1.out.ped")) #Just chromosome 1
#Let's break up the object into the conditions and the SNPs
SNPs = genome_raw[,7:length(genome_raw)]
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chr1 = csv.load("genome_chr1.csv")
chr1 = read.csv("genome_chr1.csv")
View(chr1)
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chr1 = read.csv("genome_chr1.csv")
SNP_Names = names.chr1()[5:length(chr1)]
SNP_Names = names(chr1()[5:length(chr1)])
SNP_Names = names(chr1)[5:length(chr1)]
head(SNP_Names)
chr1$"rs1496555"
cur_snp = chr1$"rs1496555"
table(cur_snp, chr1$"phenotype")
chisq.test(table(cur_snp, chr1$"phenotype"))
chisq.test(table(cur_snp, chr1$"phenotype"))$p.value
pvals = NULL
for (name in SNP_Names){
cur_snp = chr1$snp
chi2    = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals   = c(pvals, chi2$p.value)
}
pvals = NULL
for (name in SNP_Names){
cur_snp = chr1[snp]
chi2    = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals   = c(pvals, chi2$p.value)
}
pvals = NULL
for (name in SNP_Names){
cur_snp = chr1$name
chi2    = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals   = c(pvals, chi2$p.value)
}
pvals = NULL
for (name in SNP_Names){
cur_snp = chr1[name]
chi2    = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals   = c(pvals, chi2$p.value)
}
pvals = NULL
for (name in SNP_Names){
cur_snp = chr1[[name]
chi2    = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals   = c(pvals, chi2$p.value)
}
pvals = NULL
for (name in SNP_Names){
cur_snp = chr1[[name]]
chi2    = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals   = c(pvals, chi2$p.value)
}
plot(-log10(pvals))
write.csv(data.frame(SNP_Names, -log10(pvals)), "chr1_manhattan")
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
genome_raw  = data.frame(read.table("amd.out_.ped"))      #The whole genome
SNPs = genome_raw[,7:length(genome_raw)]
fastReplace = function(dataFrame, find, replaceWith){
temp_matrix = as.matrix(dataFrame)
temp_matrix[temp_matrix == find] = replaceWith
return(as.data.frame(temp_matrix))
}
SNPs = fastReplace(SNPs, TRUE, "T" )
combinedSnps = matrix(0,146,length(SNPs)/2)
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste( pmin(as.character(SNPs[,i]),as.character(SNPs[,i+1])),
pmax(as.character(SNPs[,i]),as.character(SNPs[,i+1])), sep = "" )
place = place + 1
}
genome = cbind(  genome_raw[,0:6]   ,   data.frame(combinedSnps))
genome[1:5,1:20]
#... V5 V6 X1 X2 ... ew, Let's fix this.
#These are standard for .ped files.
names(genome)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
genome = genome[,!(names(genome) %in% c("family_ID", "mother_ID", "father_ID"))]
#The columns of .map files are chromosome, marker ID, genetic location and physical location. We are only interested in marker ID.
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
SNP_Names = as.character(read.table("amd.out_.map")[,2])      #Whole genome
names(genome)[4:length(genome)] = SNP_Names
#What does it look like now?:
genome[1:5,1:10]
#nice.
rm(SNPs,combinedSnps,genome_raw,i, place) #Some quick housecleaning.
#---------------------------------------------------------------------------------------------------------
# Making sense of what we have:
# We have a pretty clean(ish) looking dataset now. But what do the different columns actually mean?
#---------------------------------------------------------------------------------------------------------
#focusing on one individual.
genome[1,1:10]
#    individual_ID sex phenotype rs950122 rs1496555 rs1338382 rs10492936 rs10489589 rs10489588 rs1109251
# 1      55113000    1         2       CG        GG        TT         GG         CC         AA        AA
#ID is self explanatory, what are sex and phenotype though?
genome[1:10,"sex"]
#So we have variables 1 and 2 here. Looking at the paper we see that 1 = male, 2 = female. Good to know.
genome[10:20,"phenotype"]
#Lots of 1s and 2s again here. Turns out 2 is case(has macular degeneration), 1 is control(doesnt).
#This is rather un-intuitive.
genome$phenotype = genome$phenotype == 2 #2/case is TRUE
genome[10:20,"phenotype"]
#[1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
# Sweet looks good to me.
#---------------------------------------------------------------------------------------------------------
# Missing data!:
# Different sequencing technologies, or processing software report missing data in different ways. This is
# annoying, but what is data science without some more cleaning?
# R uses NA for missing data, let's make sure this data works like that.
#---------------------------------------------------------------------------------------------------------
#By scanning through a couple of SNPs and running summarys we find that our data has 00 for it's missing values, for example:
summary(genome$rs2455122)
# 00  CC  GC  GG
#  1 115  28   2
#Well that wont do. Let's use our fast replace function to fix all of these points.
genome = fastReplace(genome, "00", NA )
summary(genome$rs2455122)
#  CC   GC   GG NA's
# 115   28    2    1
#Nice.
#Let's output our cleaned data for analysis!
write.csv(genome, file = "genome_full.csv")
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chr1 = read.csv("genome_full.csv")
SNP_Names = names(chr1)[5:length(chr1)]
head(SNP_Names)
#All is working, now let's loop through this.
pvals = NULL
for (name in SNP_Names){
cur_snp = chr1[[name]]
chi2    = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals   = c(pvals, chi2$p.value)
}
plot(-log10(pvals))
write.csv(data.frame(SNP_Names, -log10(pvals)), "full_manhattan")
write.csv(data.frame(SNP_Names, -log10(pvals)), "d3Viz/full_manhattan.csv")
fileDataframe = data.frame(SNP_Names, -log10(pvals)
fileDataframe = data.frame(SNP_Names, -log10(pvals)
fileDataframe = data.frame(SNP_Names, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
View(fileDataframe)
write.csv(fileDataframe, "d3Viz/full_manhattan.csv")
write.csv(fileDataframe, "d3Viz/full_Data.csv")
chr1 = read.csv("genome_chr1.csv")
SNP_Names = names(chr1)[5:length(chr1)]
head(SNP_Names)
#All is working, now let's loop through this.
pvals = NULL
for (name in SNP_Names){
cur_snp = chr1[[name]]
chi2    = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals   = c(pvals, chi2$p.value)
}
fileDataframe = data.frame(SNP_Names, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
write.csv(fileDataframe, "chr1_Data.csv")
plot(-log10(pvals))
weirdSNP = chr1$"rs10494429"
head(weirdSNP)
summary(weirdSNP)
summary(chr1$"rs10489304")
unique(chr1$"rs10489304")
length(unique(chr1$"rs10489304"))
pvals    = NULL
usedSnps = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = chr1[[name]]
if (length(unique(cur_snp)) != 1){
chi2     = chisq.test(table(cur_snp, chr1$"phenotype"))
pvals    = c(pvals, chi2$p.value)
usedSnps = c(usedSnps, name)
}
}
plot(-log10(pvals))
write.csv(fileDataframe, "fixed_chr1_Data.csv")
write.csv(fileDataframe, "d3Viz/fixed_chr1_Data.csv")
plot(-log10(pvals))
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
write.csv(fileDataframe, "d3Viz/fixed_chr1_Data.csv")
print(length(SNP_Names) - length(usedSNps))
print(length(SNP_Names) - length(usedSnps))
plot(-log10(pvals))
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
write.csv(fileDataframe, "d3Viz/fixed_chr1_Data.csv")
males = chr1[chr1$sex == 1]
View(males)
females = chr1[chr1$sex == 2]
males   = chr1[chr1$sex == 1,]
females = chr1[chr1$sex == 2,]
View(males)
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(chr1)]
pvals    = NULL
usedSnps = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = genoData[[name]]
if (length(unique(cur_snp)) != 1){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, genoData$p.value)
usedSnps = c(usedSnps, name)
}
}
}
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(chr1)]
pvals    = NULL
usedSnps = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = genoData[[name]]
if (length(unique(cur_snp)) != 1){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, genoData$p.value)
usedSnps = c(usedSnps, name)
}
}
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
return(fileDataframe)
}
test = makeData(chr1)
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(genoData)]
pvals    = NULL
usedSnps = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = genoData[[name]]
if (length(unique(cur_snp)) != 1){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, genoData$p.value)
usedSnps = c(usedSnps, name)
}
}
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
return(fileDataframe)
}
test = makeData(chr1)
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(genoData)]
pvals    = NULL
usedSnps = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = genoData[[name]]
if (length(unique(cur_snp)) != 1){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, chi2$p.value)
usedSnps = c(usedSnps, name)
}
}
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
return(fileDataframe)
}
test = makeData(chr1)
View(test)
fixed_chr1 = makeData(chr1)
print(length(fixed_chr1) - length(chr1))
print(length(SNP_Names) - length(usedSnps))
write.csv(fileDataframe, "d3Viz/fixed_chr1_Data.csv")
males   = makeData(chr1[chr1$sex == 1,])
females = makeData(chr1[chr1$sex == 2,])
write.csv(fileDataframe, "d3Viz/males_Data.csv")
write.csv(fileDataframe, "d3Viz/females_Data.csv")
View(males)
View(females)
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(genoData)]
pvals    = NULL
usedSnps = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = genoData[[name]]
if (length(unique(cur_snp)) < 2){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, chi2$p.value)
usedSnps = c(usedSnps, name)
}
}
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
return(fileDataframe)
}
fixed_chr1 = makeData(chr1)
print(length(SNP_Names) - length(usedSnps))
write.csv(fileDataframe, "d3Viz/fixed_chr1_Data.csv")
males   = makeData(chr1[chr1$sex == 1,])
View(males)
test = chr1[chr1$sex == 1,]
View(test)
test$"rs10492945"
levels(test$"rs10492945")
factor(test$"rs10492945")
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(genoData)]
pvals    = NULL
usedSnps = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = factor(genoData[[name]]) #Factor needs to be added here for when we split by gender. R remembers that it had a particular
#genotype and include it in the summary table even if you removed it from the vector, factor fixes this.
if (length(unique(cur_snp)) < 2){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, chi2$p.value)
usedSnps = c(usedSnps, name)
}
}
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
return(fileDataframe)
}
fixed_chr1 = makeData(chr1)
males   = makeData(chr1[chr1$sex == 1,])
write.csv(fileDataframe, "d3Viz/males_Data.csv")
View(test)
View(males)
females = makeData(chr1[chr1$sex == 2,])
write.csv(fileDataframe, "d3Viz/females_Data.csv")
males   = makeData(chr1[chr1$sex == 1,])
write.csv(males, "d3Viz/males_Data.csv")
females = makeData(chr1[chr1$sex == 2,])
write.csv(females, "d3Viz/females_Data.csv")
fixed_chr1 = makeData(chr1)
write.csv(fileDataframe, "d3Viz/fixed_chr1_Data.csv")
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(genoData)]
pvals    = NULL
usedSnps = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = factor(genoData[[name]]) #Factor needs to be added here for when we split by gender. R remembers that it had a particular
#genotype and include it in the summary table even if you removed it from the vector, factor fixes this.
if (length(unique(cur_snp)) < 2){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, chi2$p.value)
usedSnps = c(usedSnps, name)
}
}
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
return(fileDataframe)
}
fixed_chr1 = makeData(chr1)
#Fix this to be length of resulting df.
print(length(SNP_Names) - length(usedSnps))
# [1] 659 cool cool.
#make a file:
write.csv(fileDataframe, "d3Viz/fixed_chr1_Data.csv")
write.csv(fixed_chr1, "d3Viz/fixed_chr1_Data.csv")
View(males)
SNP_Names = names(genoData)[5:length(chr1)]
genoData = chr1
SNP_Names = names(genoData)[5:length(genoData)]
head(SNP_Names)
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(genoData)]
pvals     = NULL
usedSnps  = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
#cur_snp = factor(genoData[[name]]) #Factor needs to be added here for when we split by gender. R remembers that it had a particular
cur_snp = genoData[[name]]                                  #genotype and include it in the summary table even if you removed it from the vector, factor fixes this.
if (length(unique(cur_snp)) < 2){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, chi2$p.value)
usedSnps = c(usedSnps, name)
}
}
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
return(fileDataframe)
}
fixed_chr1 = makeData(chr1)
View(fixed_chr1)
makeData = function(genoData){
SNP_Names = names(genoData)[5:length(genoData)]
pvals     = NULL
usedSnps  = NULL #We're not using all of the SNPs this time so we need to make a list of used SNPs for plotting.
for (name in SNP_Names){
cur_snp = factor(genoData[[name]]) #Factor needs to be added here for when we split by gender. R remembers that it had a particular
#genotype and include it in the summary table even if you removed it from the vector, factor fixes this.
if (length(unique(cur_snp)) > 2){
chi2     = chisq.test(table(cur_snp, genoData$"phenotype"))
pvals    = c(pvals, chi2$p.value)
usedSnps = c(usedSnps, name)
}
}
fileDataframe = data.frame(usedSnps, -log10(pvals))
names(fileDataframe) = c("SNP", "PVal")
return(fileDataframe)
}
fixed_chr1 = makeData(chr1)
View(fixed_chr1)
write.csv(fixed_chr1, "d3Viz/fixed_chr1_Data.csv")
males   = makeData(chr1[chr1$sex == 1,])
write.csv(males, "d3Viz/males_Data.csv")
#It didn't work, oh no. What is going on? There are some NA's. Upon inspection its for SNPs that are monogenomic for a gender. Add a factor
#command to the makeData function to deal with this. It would be interesting to look at how many snps are monogenomic by gender.
females = makeData(chr1[chr1$sex == 2,])
write.csv(females, "d3Viz/females_Data.csv")
View(males)
females = makeData(chr1[chr1$sex == 2,])
write.csv(females, "d3Viz/females_Data.csv")
