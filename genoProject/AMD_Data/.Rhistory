#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp = s7694[s7694 != "00"]
snp
CC_Log = cc==2
CC_Log
snp = s7062
CC_Log = cc==2
#snp = s7694[s7694 != "00"]
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp = s7694[s7694 != "00"]
CC_Log = cc[s7694 != "00"]==2
snp = s7694[s7694 != "00"]
CC_Log = cc[s7694 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp
summary(snp)
s7694
snp = s7094[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
contrasts(snp,1)
contrasts(snp,1)[-1,]
contrasts(snp)
contrasts(snp,1)[-1,] <- cbind(Dom)
contrasts(snp)[-1,]
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
print(DomResults)
1/.17
1/0.170385395537526
DomResults = paste("Dominant: OR:", toString(1/Dom_OR[2]), " Confidence Interval: (", toString(1/Dom_CI[1,2]), toString(1/Dom_CI[2,2]), ")")
DomResults = paste("Dominant: OR:", toString((1/Dom_OR[2])), " Confidence Interval: (", toString((1/Dom_CI[1,2])), toString((1/Dom_CI[2,2])), ")")
print(DomResults)
snp = factor(s7064[s7064 != "00"])
snp
summary(snp1)
snp = factor(s7064[s7064 != "00"])
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
# snp = s7062
# CC_Log = cc==2
snp = factor(s7064[s7064 != "00"])
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
#chrom1_raw  = data.frame(read.table("amd.out_.ped"))      #The whole genome
chrom1_raw  = data.frame(read.table("amd_chr1.out.ped")) #Just chromosome 1
#Let's break up the object into the conditions and the SNPs
SNPs = chrom1_raw[,7:length(chrom1_raw)]
View(chrom1_raw)
fastReplace = function(dataFrame, find, replaceWith){
temp_matrix = as.matrix(dataFrame)
temp_matrix[temp_matrix == find] = replaceWith
return(as.data.frame(temp_matrix))
}
SNPs = fastReplace(SNPs, TRUE, "T" )
View(SNPs)
combinedSnps = matrix(0,146,length(SNPs)/2)
place = 1
alleles = NULL
for (i in seq(1,length(SNPs),2)){
alleles = sort(c(SNPs[,i],SNPs[,i+1])) #CG = GC in terms of genotypes, so let's make sure stuff is in the right order
combinedSnps[,place] = paste(alleles,collapse = "")
place = place + 1
}
View(combinedSnps)
c(SNPs[,1],SNPs[,1+1])
SNPs = chrom1_raw[,7:length(chrom1_raw)]
View(SNPs)
SNPs = fastReplace(SNPs, TRUE, "T" )
View(SNPs)
combinedSnps = matrix(0,146,length(SNPs)/2)
combinedSnps = matrix(0,146,length(SNPs)/2)
View(combinedSnps)
View(SNPs)
combinedSnps = matrix(0,146,length(SNPs)/2)
c(SNPs[,1],SNPs[,1+1])
place = 1
#To the loops!
alleles = NULL
for (i in seq(1,length(SNPs),2)){
#alleles = sort(c(SNPs[,i],SNPs[,i+1])) #CG = GC in terms of genotypes, so let's make sure stuff is in the right order
combinedSnps[,place] = pasteSNPs[,i],SNPs[,i+1],sep = "")
place = place + 1
}
place = 1
#To the loops!
alleles = NULL
for (i in seq(1,length(SNPs),2)){
#alleles = sort(c(SNPs[,i],SNPs[,i+1])) #CG = GC in terms of genotypes, so let's make sure stuff is in the right order
combinedSnps[,place] = paste(SNPs[,i],SNPs[,i+1],sep = "")
place = place + 1
}
View(SNPs)
View(combinedSnps)
test = c("ba", "cd")
test
sort(test)
sort(test[1])
sort(test[[1]])
#Counter for walking through the new matrix holder in the upcoming loop.
place = 1
#To the loops!
alleles = NULL
for (i in seq(1,length(SNPs),2)){
#alleles = sort(c(SNPs[,i],SNPs[,i+1])) #CG = GC in terms of genotypes, so let's make sure stuff is in the right order
combinedSnps[,place] = paste(c(SNPs[,i],SNPs[,i+1]),sep = "")
place = place + 1
}
combinedSnps = matrix(0,146,length(SNPs)/2)
#                       146 individuals were sequenced
#Counter for walking through the new matrix holder in the upcoming loop.
place = 1
#To the loops!
alleles = NULL
for (i in seq(1,length(SNPs),2)){
#alleles = sort(c(SNPs[,i],SNPs[,i+1])) #CG = GC in terms of genotypes, so let's make sure stuff is in the right order
combinedSnps[,place] = paste(c(SNPs[,i],SNPs[,i+1]),sep = "")
place = place + 1
}
help(paste)
combinedSnps = matrix(0,146,length(SNPs)/2)
alleles = NULL
for (i in seq(1,length(SNPs),2)){
#alleles = sort(c(SNPs[,i],SNPs[,i+1])) #CG = GC in terms of genotypes, so let's make sure stuff is in the right order
apply(cbind(SNPs[,i],SNPs[,i+1]), 1, function(x) paste(sort(x), collapse=""))
#combinedSnps[,place] = paste(SNPs[,i],SNPs[,i+1],sep = "")
place = place + 1
}
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = apply(cbind(SNPs[,i],SNPs[,i+1]), 1, function(x) paste(sort(x), collapse=""))
place = place + 1
}
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = apply(cbind(SNPs[,i],SNPs[,i+1]), 1, function(x) paste(sort(x), collapse=""))
place = place + 1
}
View(combinedSnps)
View(SNPs)
#To the loops!
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste(pmin(SNPs[,i],SNPs[,i+1]), pmax(SNPs[,i],SNPs[,i+1]))
place = place + 1
}
View(combinedSnps)
warnings()
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste( pmin(SNPs[,i],SNPs[,i+1]), pmax(SNPs[,i],SNPs[,i+1]), collapse = "" )
place = place + 1
}
View(combinedSnps)
place = 1
alleles = NULL
for (i in seq(1,length(SNPs),2)){
#alleles = sort(c(SNPs[,i],SNPs[,i+1])) #CG = GC in terms of genotypes, so let's make sure stuff is in the right order
combinedSnps[,place] = paste(SNPs[,i],SNPs[,i+1],sep = "")
place = place + 1
}
View(combinedSnps)
#To the loops!
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste( pmin(as.character(SNPs[,i]),as.character(SNPs[,i+1])), pmax(as.character(SNPs[,i]),as.character(SNPs[,i+1])), collapse = "" )
place = place + 1
}
View(combinedSnps)
#To the loops!
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste( pmin(as.character(SNPs[,i]),as.character(SNPs[,i+1])), pmax(as.character(SNPs[,i]),as.character(SNPs[,i+1])) )
place = place + 1
}
View(combinedSnps)
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste( pmin(as.character(SNPs[,i]),as.character(SNPs[,i+1])),
pmax(as.character(SNPs[,i]),as.character(SNPs[,i+1])), sep = "" )
place = place + 1
}
View(combinedSnps)
source("http://www.uvm.edu/~rsingle/Rdata/scripts_stat295F14.R")
amd <- otherdata("amd_chr1_fixed.dat")
View(amd)
chrom1 = cbind(  chrom1_raw[,0:6]   ,   data.frame(combinedSnps))
View(chrom1)
#quickly let's check what we have so far:
chrom1[1:5,1:20]
#... V5 V6 X1 X2 ... ew, Let's fix this.
#These are standard for .ped files.
names(chrom1)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
chrom1 = chrom1[,!(names(chrom1) %in% c("family_ID", "mother_ID", "father_ID"))]
#The columns of .map files are chromosome, marker ID, genetic location and physical location. We are only interested in marker ID.
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
SNP_Names = as.character(read.table("amd.out_.map")[,2])      #Whole genome
#SNP_Names = as.character(read.table("amd_chr1.out.map")[,2]) #First chromosome
#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(chrom1)[4:length(chrom1)] = SNP_Names
#What does it look like now?:
chrom1[1:5,1:10]
#nice.
rm(SNPs,combinedSnps,chrom1_raw,i, place) #Some quick housecleaning.
#---------------------------------------------------------------------------------------------------------
# Making sense of what we have:
# We have a pretty clean(ish) looking dataset now. But what do the different columns actually mean?
#---------------------------------------------------------------------------------------------------------
#focusing on one individual.
chrom1[1,1:10]
#    individual_ID sex phenotype rs950122 rs1496555 rs1338382 rs10492936 rs10489589 rs10489588 rs1109251
# 1      55113000    1         2       CG        GG        TT         GG         CC         AA        AA
#ID is self explanatory, what are sex and phenotype though?
chrom1[1:10,"sex"]
#So we have variables 1 and 2 here. Looking at the paper we see that 1 = male, 2 = female. Good to know.
chrom1[10:20,"phenotype"]
#Lots of 1s and 2s again here. Turns out 2 is case(has macular degeneration), 1 is control(doesnt).
#This is rather un-intuitive.
chrom1$phenotype = chrom1$phenotype == 2 #2/case is TRUE
chrom1[10:20,"phenotype"]
#[1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
# Sweet looks good to me.
#---------------------------------------------------------------------------------------------------------
# Missing data!:
# Different sequencing technologies, or processing software report missing data in different ways. This is
# annoying, but what is data science without some more cleaning?
# R uses NA for missing data, let's make sure this data works like that.
#---------------------------------------------------------------------------------------------------------
#By scanning through a couple of SNPs and running summarys we find that our data has 00 for it's missing values:
summary(chrom1$rs2455122)
# 00  CC  GC  GG
#  1 115  28   2
#Well that wont do. Let's use our fast replace function to fix all of these points.
chrom1 = fastReplace(chrom1, "00", NA )
View(chrom1)
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
#chrom1_raw  = data.frame(read.table("amd.out_.ped"))      #The whole genome
chrom1_raw  = data.frame(read.table("amd_chr1.out.ped")) #Just chromosome 1
#Let's break up the object into the conditions and the SNPs
SNPs = chrom1_raw[,7:length(chrom1_raw)]
fastReplace = function(dataFrame, find, replaceWith){
temp_matrix = as.matrix(dataFrame)
temp_matrix[temp_matrix == find] = replaceWith
return(as.data.frame(temp_matrix))
}
SNPs = fastReplace(SNPs, TRUE, "T" )
combinedSnps = matrix(0,146,length(SNPs)/2)
View(SNPs)
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste( pmin(as.character(SNPs[,i]),as.character(SNPs[,i+1])),
pmax(as.character(SNPs[,i]),as.character(SNPs[,i+1])), sep = "" )
place = place + 1
}
View(combinedSnps)
chrom1 = cbind(  chrom1_raw[,0:6]   ,   data.frame(combinedSnps))
chrom1[1:5,1:20]
#... V5 V6 X1 X2 ... ew, Let's fix this.
#These are standard for .ped files.
names(chrom1)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
chrom1 = chrom1[,!(names(chrom1) %in% c("family_ID", "mother_ID", "father_ID"))]
#The columns of .map files are chromosome, marker ID, genetic location and physical location. We are only interested in marker ID.
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
SNP_Names = as.character(read.table("amd.out_.map")[,2])      #Whole genome
SNP_Names = as.character(read.table("amd_chr1.out.map")[,2]) #First chromosome
#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(chrom1)[4:length(chrom1)] = SNP_Names
#What does it look like now?:
chrom1[1:5,1:10]
#nice.
rm(SNPs,combinedSnps,chrom1_raw,i, place) #Some quick housecleaning.
chrom1[1,1:10]
chrom1[1:10,"sex"]
chrom1[10:20,"phenotype"]
#Lots of 1s and 2s again here. Turns out 2 is case(has macular degeneration), 1 is control(doesnt).
#This is rather un-intuitive.
chrom1$phenotype = chrom1$phenotype == 2 #2/case is TRUE
chrom1[10:20,"phenotype"]
#[1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
# Sweet looks good to me.
summary(chrom1$rs2455122)
# 00  CC  GC  GG
#  1 115  28   2
#Well that wont do. Let's use our fast replace function to fix all of these points.
chrom1 = fastReplace(chrom1, "00", NA )
#So fast, let's check and see if it worked:
summary(chrom1$rs2455122)
#  CC   GC   GG NA's
write.csv(chrom1, file = "chrom1.csv")
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
#genome_raw  = data.frame(read.table("amd.out_.ped"))      #The whole genome
genome_raw  = data.frame(read.table("amd_chr1.out.ped")) #Just chromosome 1
#Let's break up the object into the conditions and the SNPs
SNPs = genome_raw[,7:length(genome_raw)]
fastReplace = function(dataFrame, find, replaceWith){
temp_matrix = as.matrix(dataFrame)
temp_matrix[temp_matrix == find] = replaceWith
return(as.data.frame(temp_matrix))
}
SNPs = fastReplace(SNPs, TRUE, "T" )
#make a holder for merged snps
combinedSnps = matrix(0,146,length(SNPs)/2)
#                       146 individuals were sequenced
# To the loops! This method is commented out because later we see that the genotypes need to be sorted alphabetically to avoid
# confusion with the difference between CG and GC and so on. Order does not matter for genotypes.
# place = 1
# alleles = NULL
# for (i in seq(1,length(SNPs),2)){
#   combinedSnps[,place] = paste(SNPs[,i],SNPs[,i+1],sep = "")
#   place = place + 1
# }
#This method accomplishes this feat, and in remarkably quick time. Might be ugly but saves a lot of headaches down the road.
place = 1
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste( pmin(as.character(SNPs[,i]),as.character(SNPs[,i+1])),
pmax(as.character(SNPs[,i]),as.character(SNPs[,i+1])), sep = "" )
place = place + 1
}
#Assemble the data into a big and clean(er) dataframe
genome = cbind(  genome_raw[,0:6]   ,   data.frame(combinedSnps))
#               non-genotype cols            cleaned cols
#---------------------------------------------------------------------------------------------------------
# Variable labeling:
# So the data is getting to look pretty nice. However we can quickly notice something, the column titles
# are basically giberish. Luckly the format that this data came to us from is rather standard and we can
# fix this.
#---------------------------------------------------------------------------------------------------------
#quickly let's check what we have so far:
genome[1:5,1:20]
#... V5 V6 X1 X2 ... ew, Let's fix this.
#These are standard for .ped files.
names(genome)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
genome = genome[,!(names(genome) %in% c("family_ID", "mother_ID", "father_ID"))]
#The columns of .map files are chromosome, marker ID, genetic location and physical location. We are only interested in marker ID.
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
#SNP_Names = as.character(read.table("amd.out_.map")[,2])      #Whole genome
SNP_Names = as.character(read.table("amd_chr1.out.map")[,2]) #First chromosome
#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(genome)[4:length(genome)] = SNP_Names
#What does it look like now?:
genome[1:5,1:10]
#nice.
rm(SNPs,combinedSnps,genome_raw,i, place) #Some quick housecleaning.
#focusing on one individual.
genome[1,1:10]
#    individual_ID sex phenotype rs950122 rs1496555 rs1338382 rs10492936 rs10489589 rs10489588 rs1109251
# 1      55113000    1         2       CG        GG        TT         GG         CC         AA        AA
#ID is self explanatory, what are sex and phenotype though?
genome[1:10,"sex"]
#So we have variables 1 and 2 here. Looking at the paper we see that 1 = male, 2 = female. Good to know.
genome[10:20,"phenotype"]
#Lots of 1s and 2s again here. Turns out 2 is case(has macular degeneration), 1 is control(doesnt).
#This is rather un-intuitive.
genome$phenotype = genome$phenotype == 2 #2/case is TRUE
genome[10:20,"phenotype"]
#[1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
# Sweet looks good to me.
#---------------------------------------------------------------------------------------------------------
# Missing data!:
# Different sequencing technologies, or processing software report missing data in different ways. This is
# annoying, but what is data science without some more cleaning?
# R uses NA for missing data, let's make sure this data works like that.
#---------------------------------------------------------------------------------------------------------
#By scanning through a couple of SNPs and running summarys we find that our data has 00 for it's missing values:
summary(genome$rs2455122)
genome = fastReplace(genome, "00", NA )
#So fast, let's check and see if it worked:
summary(genome$rs2455122)
#  CC   GC   GG NA's
# 115   28    2    1
#Nice.
#Let's output our cleaned data for analysis!
write.csv(genome, file = "genome_chr1.csv")
