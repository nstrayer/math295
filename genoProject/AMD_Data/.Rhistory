xx[1,2] <- x[1,2]
xx[2,1] <- x[2,1] + x[3,1]
xx[2,2] <- x[2,2] + x[3,2]
x
xx <- matrix(NA,2,2)
xx[1,1] <- x[1,1]
xx[1,2] <- x[1,2]
xx[2,1] <- x[2,1] + x[3,1]
xx[2,2] <- x[2,2] + x[3,2]
rownames(xx) <- c("CC","OTH")
xx
(xx[1,1]*xx[2,2])/(xx[1,2]*xx[2,1])
1/(xx[1,1]*xx[2,2])/(xx[1,2]*xx[2,1])
(xx[1,2]*xx[2,1])/(xx[1,1]*xx[2,2])
Add <- c(2, 1, 0) #Number of A alleles FOR THIS SNP
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Additive model on the log-odds scale
contrasts(s7062,1) <- cbind(Add)
contrasts(s7062)
model3 <- glm(pre.BMI>25 ~ s7062, family=binomial)
#model3
exp(model3$coeff)
contrasts(s7062,1) <- cbind(Add)
contrasts(s7062)
model3 <- glm(cc==2 ~ s7062, family=binomial)
#model3
exp(model3$coeff)
snp = s7062
x <- table(snp,cc == 2)
x
xx <- matrix(NA,2,2)
xx[1,1] <- x[1,1]
xx[1,2] <- x[1,2]
xx[2,1] <- x[2,1] + x[3,1]
xx[2,2] <- x[2,2] + x[3,2]
rownames(xx) <- c("CC","OTH")
xx
(xx[1,2]*xx[2,1])/(xx[1,1]*xx[2,2]) #upside down because of r being weird about letters
#Dummy coding for Additive (log-odds scale), Dominant, and Recessive models
#AA GA GG
Add <- c(2, 1, 0) #Number of A alleles FOR THIS SNP
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Additive model on the log-odds scale
contrasts(snp,1) <- cbind(Add)
contrasts(snp)
model3 <- glm(cc==2 ~ snp, family=binomial)
#model3
exp(model3$coeff)
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
model4 <- glm(cc==2 ~ snp, family=binomial)
#model4
exp(model4$coeff)
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
model5 <- glm(cc==2 ~ snp, family=binomial)
#model5
exp(model5$coeff)
m2.sum <- summary(model2)
ci.l <- exp( m2.sum$coeff[,1] - 1.96*(m2.sum$coeff[,2]) )
ci.u <- exp( m2.sum$coeff[,1] + 1.96*(m2.sum$coeff[,2]) )
rbind(ci.l, ci.u)
m4.sum <- summary(model4)
ci.l <- exp( m2.sum$coeff[,1] - 1.96*(m2.sum$coeff[,2]) )
ci.u <- exp( m2.sum$coeff[,1] + 1.96*(m2.sum$coeff[,2]) )
rbind(ci.l, ci.u)
m4.sum <- summary(model4)
ci.l <- exp( m4.sum$coeff[,1] - 1.96*(m4.sum$coeff[,2]) )
ci.u <- exp( m4.sum$coeff[,1] + 1.96*(m4.sum$coeff[,2]) )
rbind(ci.l, ci.u)
m5.sum <- summary(model5)
ci.l <- exp( m5.sum$coeff[,1] - 1.96*(m5.sum$coeff[,2]) )
ci.u <- exp( m5.sum$coeff[,1] + 1.96*(m5.sum$coeff[,2]) )
rbind(ci.l, ci.u)
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
exp(Dom_model$coeff)
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
exp(Rec_model$coeff)
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
rbind(ci.l, ci.u)
snp = s7062
#snp = s7694
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
Rec_CI
Rec_CI[2,1]
Rec_CI[1,2]
DomResults = paste("Dominant: OR:", toString(Dom_OR), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
DomResults
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
DomResults
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
#snp = s7062
snp = s7694
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(cc==2 ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(cc==2 ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp = s7694[s7694 != "00"]
snp
CC_Log = cc==2
CC_Log
snp = s7062
CC_Log = cc==2
#snp = s7694[s7694 != "00"]
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp = s7694[s7694 != "00"]
CC_Log = cc[s7694 != "00"]==2
snp = s7694[s7694 != "00"]
CC_Log = cc[s7694 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
snp
summary(snp)
s7694
snp = s7094[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
snp = s7064[s7064 != "00"]
CC_Log = cc[s7064 != "00"]==2
snp
contrasts(snp,1)
contrasts(snp,1)[-1,]
contrasts(snp)
contrasts(snp,1)[-1,] <- cbind(Dom)
contrasts(snp)[-1,]
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
print(DomResults)
1/.17
1/0.170385395537526
DomResults = paste("Dominant: OR:", toString(1/Dom_OR[2]), " Confidence Interval: (", toString(1/Dom_CI[1,2]), toString(1/Dom_CI[2,2]), ")")
DomResults = paste("Dominant: OR:", toString((1/Dom_OR[2])), " Confidence Interval: (", toString((1/Dom_CI[1,2])), toString((1/Dom_CI[2,2])), ")")
print(DomResults)
snp = factor(s7064[s7064 != "00"])
snp
summary(snp1)
snp = factor(s7064[s7064 != "00"])
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
# snp = s7062
# CC_Log = cc==2
snp = factor(s7064[s7064 != "00"])
CC_Log = cc[s7064 != "00"]==2
Dom <- c(1, 1, 0) #With A as the 'variant' allele
Rec <- c(1, 0, 0) #With A as the 'variant' allele
#Dominant model
contrasts(snp,1) <- cbind(Dom)
contrasts(snp)
Dom_model <- glm(CC_Log ~ snp, family=binomial)
#model4
Dom_OR = exp(Dom_model$coeff)
#Recessive model
contrasts(snp,1) <- cbind(Rec)
contrasts(snp)
Rec_model <- glm(CC_Log ~ snp, family=binomial)
#model5
Rec_OR = exp(Rec_model$coeff)
#95% CI for dominant OR
Dom_m.sum <- summary(Dom_model)
ci.l <- exp( Dom_m.sum$coeff[,1] - 1.96*(Dom_m.sum$coeff[,2]) )
ci.u <- exp( Dom_m.sum$coeff[,1] + 1.96*(Dom_m.sum$coeff[,2]) )
Dom_CI = rbind(ci.l, ci.u)
#95% CI for recessive OR
Rec_m.sum <- summary(Rec_model)
ci.l <- exp( Rec_m.sum$coeff[,1] - 1.96*(Rec_m.sum$coeff[,2]) )
ci.u <- exp( Rec_m.sum$coeff[,1] + 1.96*(Rec_m.sum$coeff[,2]) )
Rec_CI = rbind(ci.l, ci.u)
DomResults = paste("Dominant: OR:", toString(Dom_OR[2]), " Confidence Interval: (", toString(Dom_CI[1,2]), toString(Dom_CI[2,2]), ")")
RecResults = paste("Recesive: OR:", toString(Rec_OR[2]), " Confidence Interval: (", toString(Rec_CI[1,2]), toString(Rec_CI[2,2]), ")")
print(DomResults)
print(RecResults)
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chrom1_raw  = data.frame(read.table("amd_chr1.out.ped"))
#Let's break up the object into the conditions and the SNPs
SNPs = chrom1_raw[,7:length(chrom1_raw)]
SNPs[SNPs == TRUE] = "T" #There are some weird values where T alleles are represented as TRUE. This fixes that.
place = 1
combinedSnps = matrix(0,146,length(SNPs)/2)
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste(SNPs[,i], SNPs[,i+1],sep = "")
place = place + 1
}
#Assemble the data into a big and clean(er) dataframe
chrom1 = cbind(chrom1_raw[,0:6],data.frame(combinedSnps))
#These are standard for sequencing data
names(chrom1)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
chrom1 = chrom1[,!(names(chrom1) %in% c("family_ID", "mother_ID", "father_ID"))]
#The form of .map files is chromosome, marker ID, genetic location and physical location. We are only interested in marker ID
SNP_Names = data.frame(read.table("amd_chr1.out.map"))[,2]
typeof(SNP_Names)
SNP_Names = read.table("amd_chr1.out.map")[,2]
head(SNP_Names)
names(chrom1)[4:length(chrom1)] = SNP_Names
View(chrom1)
SNP_Names = as.numeric(read.table("amd_chr1.out.map")[,2])
names(chrom1)[4:length(chrom1)] = SNP_Names
View(chrom1)
head(SNP_Names)
SNP_Names = read.table("amd_chr1.out.map")[,2]
head(SNP_Names)
SNP_Names = read.table("amd_chr1.out.map")[[,2]]
SNP_Names = read.table("amd_chr1.out.map")[,2][[1]]
head(SNP_Names)
names(chrom1)[4:length(chrom1)] = SNP_Names
View(chrom1)
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chrom1_raw  = data.frame(read.table("amd_chr1.out.ped"))
#Let's break up the object into the conditions and the SNPs
SNPs = chrom1_raw[,7:length(chrom1_raw)]
SNPs[SNPs == TRUE] = "T" #There are some weird values where T alleles are represented as TRUE. This fixes that.
place = 1
combinedSnps = matrix(0,146,length(SNPs)/2)
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste(SNPs[,i], SNPs[,i+1],sep = "")
place = place + 1
}
#Assemble the data into a big and clean(er) dataframe
chrom1 = cbind(chrom1_raw[,0:6],data.frame(combinedSnps))
#These are standard for sequencing data
names(chrom1)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
chrom1 = chrom1[,!(names(chrom1) %in% c("family_ID", "mother_ID", "father_ID"))]
#The form of .map files is chromosome, marker ID, genetic location and physical location. We are only interested in marker ID
SNP_Names = read.table("amd_chr1.out.map")[,2][[1]]
View(chrom1)
names(chrom1)[4:length(chrom1)] = SNP_Names
View(chrom1)
SNP_Names = as.character(read.table("amd_chr1.out.map")[,2])
head(SNP_Names)
names(chrom1)[4:length(chrom1)] = SNP_Names
View(chrom1)
source("http://www.uvm.edu/~rsingle/Rdata/scripts_stat295F14.R")
amd <- otherdata("amd_chr1_fixed.dat")
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chrom1_raw  = data.frame(read.table("amd_chr1.out.ped"))
#Let's break up the object into the conditions and the SNPs
SNPs = chrom1_raw[,7:length(chrom1_raw)]
SNPs[SNPs == TRUE] = "T" #There are some weird values where T alleles are represented as TRUE. This fixes that.
place = 1
combinedSnps = matrix(0,146,length(SNPs)/2)
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste(SNPs[,i], SNPs[,i+1],sep = "")
place = place + 1
}
#Assemble the data into a big and clean(er) dataframe
chrom1 = cbind(chrom1_raw[,0:6],data.frame(combinedSnps))
#These are standard for sequencing data
names(chrom1)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
chrom1 = chrom1[,!(names(chrom1) %in% c("family_ID", "mother_ID", "father_ID"))]
#The form of .map files is chromosome, marker ID, genetic location and physical location. We are only interested in marker ID
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
SNP_Names = as.character(read.table("amd_chr1.out.map")[,2])
#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(chrom1)[4:length(chrom1)] = SNP_Names
rm(SNP_Names) #Get rid of SNP_Names because it takes up space.
rm(SNP_Names,SNPs,combinedSnps,chrome1_raw) #Get rid of SNP_Names because it takes up space.
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chrom1_raw  = data.frame(read.table("amd_chr1.out.ped"))
#Let's break up the object into the conditions and the SNPs
SNPs = chrom1_raw[,7:length(chrom1_raw)]
SNPs[SNPs == TRUE] = "T" #There are some weird values where T alleles are represented as TRUE. This fixes that.
place = 1
combinedSnps = matrix(0,146,length(SNPs)/2)
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste(SNPs[,i], SNPs[,i+1],sep = "")
place = place + 1
}
#Assemble the data into a big and clean(er) dataframe
chrom1 = cbind(chrom1_raw[,0:6],data.frame(combinedSnps))
#These are standard for sequencing data
names(chrom1)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
chrom1 = chrom1[,!(names(chrom1) %in% c("family_ID", "mother_ID", "father_ID"))]
#The form of .map files is chromosome, marker ID, genetic location and physical location. We are only interested in marker ID
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
SNP_Names = as.character(read.table("amd_chr1.out.map")[,2])
#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(chrom1)[4:length(chrom1)] = SNP_Names
rm(SNP_Names,SNPs,combinedSnps,chrom1_raw) #Get rid of SNP_Names because it takes up space.
View(chrom1)
chrom1$phenotype = chrom1$phenotype == 2
View(chrom1)
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chrom1_raw  = data.frame(read.table("amd_chr1.out.ped"))
#Let's break up the object into the conditions and the SNPs
SNPs = chrom1_raw[,7:length(chrom1_raw)]
SNPs[SNPs == TRUE] = "T" #There are some weird values where T alleles are represented as TRUE. This fixes that.
place = 1
combinedSnps = matrix(0,146,length(SNPs)/2)
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste(SNPs[,i], SNPs[,i+1],sep = "")
place = place + 1
}
#Assemble the data into a big and clean(er) dataframe
chrom1 = cbind(chrom1_raw[,0:6],data.frame(combinedSnps))
#These are standard for sequencing data
names(chrom1)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
chrom1 = chrom1[,!(names(chrom1) %in% c("family_ID", "mother_ID", "father_ID"))]
#The form of .map files is chromosome, marker ID, genetic location and physical location. We are only interested in marker ID
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
SNP_Names = as.character(read.table("amd_chr1.out.map")[,2])
#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(chrom1)[4:length(chrom1)] = SNP_Names
rm(SNP_Names,SNPs,combinedSnps,chrom1_raw) #Do some housecleaning.
View(chrom1)
chrom1$phenotype = chrom1$phenotype == 2
View(chrom1)
chrom1[chrom1 == "00"] = NA
View(chrom1)
chrom1[,5]
chrom1 = factor(chrom1)
chrom1_raw  = data.frame(read.table("amd.out_.ped")) #Attempting the whole genome
View(chrom1_raw)
SNPs = chrom1_raw[,7:length(chrom1_raw)]
SNPs[SNPs == TRUE] = "T" #There are some weird values where T alleles are represented as TRUE. This fixes that.
View(chrom1)
View(chrom1_raw)
place = 1
combinedSnps = matrix(0,146,length(SNPs)/2)
#                       146 individuals were sequenced
for (i in seq(1,length(SNPs),2)){
combinedSnps[,place] = paste(SNPs[,i], SNPs[,i+1],sep = "")
place = place + 1
}
View(combinedSnps)
chrom1 = cbind(chrom1_raw[,0:6],data.frame(combinedSnps))
#These are standard for sequencing data
names(chrom1)[0:6] = c("family_ID", "individual_ID", "father_ID", "mother_ID", "sex", "phenotype")
#We can throw out the family_ID as it is simply sequential, in addition mother and father id values as they are all simply zeros.
chrom1 = chrom1[,!(names(chrom1) %in% c("family_ID", "mother_ID", "father_ID"))]
#The form of .map files is chromosome, marker ID, genetic location and physical location. We are only interested in marker ID
#Because R likes to give weird datatypes when selecting out of a dataframe we have to specifiy we want this in a vector of strings.
SNP_Names = as.character(read.table("amd_chr1.out.map")[,2])
SNP_Names = as.character(read.table("amd.out_.map")[,2])
#Now that we have the names let's put them into the SNP column names of the big dataframe:
names(chrom1)[4:length(chrom1)] = SNP_Names
chrom1[1:20,1:20]
rm(SNP_Names,SNPs,combinedSnps,chrom1_raw) #Do some housecleaning.
#Let's change the phenotype column to true if they are a case (2), false if they are a control(1)
chrom1$phenotype = chrom1$phenotype == 2
#Currently the missing data is represented as 00, this is not great for R, let's change it to NA.
chrom1[chrom1 == "00"] = NA
SNPs <- as.data.frame(lapply(SNPs, function(x){replace(x, x = TRUE,"T")})
SNPs <- as.data.frame(lapply(SNPs, function(x){replace(x, x = TRUE,"T")})
setwd("/Users/Nick/fall14/math295/genoProject/AMD_Data")
chrom1_raw  = data.frame(read.table("amd.out_.ped")) #Attempting the whole genome
#chrom1_raw  = data.frame(read.table("amd_chr1.out.ped"))
#Let's break up the object into the conditions and the SNPs
SNPs = chrom1_raw[,7:length(chrom1_raw)]
View(chrom1_raw)
